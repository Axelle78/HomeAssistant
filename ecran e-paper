esphome:
  name: ecran
  friendly_name: Ecran

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "########"

ota:
  password: "#######"

script:
  - id: update_screen
    then:
      - component.update: eink_display


spi:
  clk_pin: 13
  mosi_pin: 14

font:
  ######### REGULAR #################
  - file: "epaper/Utendo-Regular.ttf"
    id: book20
    size: 20
    glyphs: &font-glyphs
      ['!', '"', '%', '(', ')', '+', '=', ',', '-', '_', '.', ':', '°', ' ', '''','\',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'é', 'à', 'è', 'ç', 'ù', 'É', 'À', 'È', 'Ç', 'Ù']
  - file: "epaper/Utendo-Semibold.ttf"
    id: book25
    size: 25
    glyphs : *font-glyphs 
  ########## BOLD ################## 
  - file: "epaper/Utendo-Semibold.ttf"
    id: bold15
    size: 15
    glyphs : *font-glyphs 
  - file: "epaper/Utendo-Semibold.ttf"
    id: bold20
    size: 20
    glyphs : *font-glyphs 
  - file: "epaper/Utendo-Semibold.ttf"
    id: bold25
    size: 25
    glyphs : *font-glyphs 
  - file: "epaper/Utendo-Semibold.ttf"
    id: bold30
    size: 30
    glyphs : *font-glyphs 
  - file: "epaper/Utendo-Semibold.ttf"
    id: bold35
    size: 35
    glyphs : *font-glyphs 
  - file: "epaper/Utendo-Semibold.ttf"
    id: bold40
    size: 40
    glyphs : *font-glyphs 
  - file: "epaper/Utendo-Semibold.ttf"
    id: bold55
    size: 55
    glyphs: ['.', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', '-']

  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi120
    size: 100
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F00E9" # mdi-cake
      - "\U000F0A70" # mdi-silverware-fork-knife
      - "\U000F1A74" # mdi-solar-power-variant-outline
      - "\U000F1904" # mdi-home-lightning-bolt-outline
      - "\U000F05C3" # mdi-youtube
      - "\U000F05D6" # mdi-alert-circle-outline

  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi36
    size: 36
    glyphs: *mdi-weather-glyphs
  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi20
    size: 20
    glyphs: *mdi-weather-glyphs
  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi25
    size: 25
    glyphs: 
    - "\U000F050F" # mdi-thermometer
    - "\U000F01AD" # mdi-currency-eur
    - "\U000F1A73" # mdi-solar-power-variant
    - "\U000F192D" # transmission-tower-import
    - "\U000F192C" # transmission-tower-export


    
sensor:
  - platform: homeassistant
    entity_id: sensor.cout_tempo_jour_total
    id: cout_edf
  - platform: homeassistant
    entity_id: sensor.evol_cout_hier
    id: evol_cout_edf
  - platform: homeassistant
    entity_id: sensor.conso_tempo_jour_total
    id: conso_total
  - platform: homeassistant
    entity_id: sensor.evol_conso_hier
    id: evol_conso
  - platform: homeassistant
    entity_id: sensor.prodution_kwh
    id: production
  - platform: homeassistant
    entity_id: sensor.evol_production_hier
    id: evol_production
  - platform: homeassistant
    entity_id: sensor.ecojoko_surplus_de_production
    id: export_kwh
  - platform: homeassistant
    entity_id: sensor.indoor_exterieur_temperature
    id: weather_temperature
  - platform: homeassistant
    entity_id: sensor.indoor_temperature
    id: temp_salon
  - platform: homeassistant
    entity_id: sensor.ble_temperature_temperature_chambre
    id: temp_chambre
  - platform: homeassistant
    entity_id: sensor.ble_temperature_temperature_chambre_de_lucie
    id: temp_lucie
  - platform: homeassistant
    entity_id: sensor.ble_temperature_temperature_chambre_chloe
    id: temp_chloe
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_day_1
    id: temp_J0
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_day_2
    id: temp_J1
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_day_3
    id: temp_J2
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_day_4
    id: temp_J3
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_day_5
    id: temp_J4
  - platform: homeassistant
    entity_id: input_number.minuteur
    id: minuteur
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_hour_1
    id: temp_h1
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_hour_2
    id: temp_h2
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_hour_3
    id: temp_h3
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_hour_4
    id: temp_h4
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_hour_5
    id: temp_h5


text_sensor: 
  - platform: homeassistant
    entity_id: sensor.date_fr
    id: date_fr
  - platform: homeassistant
    entity_id: sensor.jour_fr
    id: jour_fr
  - platform: homeassistant
    entity_id: sensor.time_fr
    id: time_fr
  - platform: homeassistant
    entity_id: weather.mantes_la_ville
    id: meteo
  - platform: homeassistant
    entity_id: sensor.rte_tempo_couleur_actuelle
    id: tempo_jour
  - platform: homeassistant
    entity_id: sensor.rte_tempo_prochaine_couleur
    id: tempo_demain
  - platform: homeassistant
    entity_id: sensor.mode_chauffage
    id: mode_chauffage
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_conditionj_1
    id: condition_J0
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_conditionj_2
    id: condition_J1
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_conditionj_3
    id: condition_J2
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_conditionj_4
    id: condition_J3
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_conditionj_5
    id: condition_J4
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_condition_1
    id: condition_h1
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_condition_2
    id: condition_h2
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_condition_3
    id: condition_h3
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_condition_4
    id: condition_h4
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_condition_5
    id: condition_h5
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_heure_1
    id: heure_h1
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_heure_2
    id: heure_h2
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_heure_3
    id: heure_h3
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_heure_4
    id: heure_h4
  - platform: homeassistant
    entity_id: sensor.temperature_forecast_heure_5
    id: heure_h5
  - platform: homeassistant
    entity_id: sensor.vigilance
    id: vigilance
  - platform: homeassistant
    entity_id: sensor.cours_chloe
    id: cours_chloe
  - platform: homeassistant
    entity_id: sensor.cours_lucie
    id: cours_lucie  
  - platform: homeassistant
    entity_id: sensor.chloe_moyenne
    id: moyenne_chloe
  - platform: homeassistant
    entity_id: sensor.moyenne_lucie
    id: moyenne_lucie
  - platform: homeassistant
    entity_id: sensor.anniversaire
    id: anniversaire
  - platform: homeassistant
    entity_id: sensor.pixel_7a_battery_level
    id: batterie_axelle
  - platform: homeassistant
    entity_id: sensor.samsung_a33_battery_level
    id: batterie_richard
  - platform: homeassistant
    entity_id: sensor.sm_a528b_battery_level
    id: batterie_chloe
  - platform: homeassistant
    entity_id: sensor.rmo_nx1_battery_level
    id: batterie_lucie
  - platform: homeassistant
    entity_id: input_boolean.summer_mode
    id: summer
time:
  - platform: sntp
    id: sntp_time
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: 15
    dc_pin: 27
    busy_pin: 25
    reset_pin: 26
    reset_duration: 200ms
    model: 7.50inV2alt
    rotation: 270°
    update_interval: 300s
    lambda: |
        std::map<std::string, std::string> weather_icon_map
        {
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"night", "\U000F0594"},
          {"night-partly-cloudy", "\U000F0F31"},
          {"partlycloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };

        std::map<std::string, std::string> weather_traduction
        {
          {"cloudy", "Nuageux"},
          {"cloudy-alert", "Alerte"},
          {"cloudy-arrow-right", "--"},
          {"fog", "Brouillard"},
          {"hail", "Grêle"},
          {"hazy", "Brume"},
          {"hurricane", "Ouragan"},
          {"lightning", "Orage"},
          {"lightning-rainy", "Orageux"},
          {"night", "Nuit"},
          {"night-partly-cloudy", "Nuageux"},
          {"partlycloudy", "Eclaircies"},
          {"partly-lightning", "Orageux"},
          {"partly-rainy", "Pluvieux"},
          {"partly-snowy", "Neigeux"},
          {"partly-snowy-rainy", "Neigeux"},
          {"pouring", "À verse"},
          {"rainy", "Pluvieux"},
          {"snowy", "Neigeux"},
          {"snowy-heavy", "Neigeux"},
          {"snowy-rainy", "Neigeux"},
          {"sunny", "Ensoleillé"},
          {"sunny-alert", "Alerte"},
          {"sunny-off", "--"},
          {"sunset", "Crépuscule"},
          {"sunset-down", "Crépuscule"},
          {"sunset-up", "Aube"},
          {"tornado", "Tornade"},
          {"windy", "Venteux"},
          {"windy-variant", "Venteux"},
        };

        int minut = int(id(minuteur).state);

        if (minut > 0) {
          
        it.printf(240, 20, id(bold35), TextAlign::TOP_CENTER, "%s", id(date_fr).state.c_str());
        

        it.filled_rectangle(20, 70, 440, 2);

        it.printf(100, 80, id(mdi120), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(meteo).state].c_str());
        it.printf(175, 90, id(bold35), TextAlign::TOP_LEFT, "%s", weather_traduction[id(meteo).state].c_str());
        it.printf(175, 132, id(bold55), TextAlign::TOP_LEFT, "%2.1f°C", id(weather_temperature).state);
        
        auto time = id(sntp_time).now(); 
        int today = time.day_of_week; 

        std::array<std::string, 7> weekdays = {"Sam", "Dim", "Lun", "Mar", "Mer", "Jeu", "Ven"};

        int future_day_index_0 = (today ) % 7;
        std::string day_name_0 = weekdays[future_day_index_0];

        int future_day_index_1 = (today + 1 ) % 7;
        std::string day_name_1 = weekdays[future_day_index_1];

        int future_day_index_2 = (today + 2 ) % 7;
        std::string day_name_2 = weekdays[future_day_index_2];

        int future_day_index_3 = (today + 3 ) % 7;
        std::string day_name_3 = weekdays[future_day_index_3];

        it.printf(60, 200, id(bold20), TextAlign::CENTER, "%s", day_name_0.c_str());
        it.printf(60, 220, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_J0).state].c_str());
        it.printf(60, 260, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_J0).state);
        it.filled_rectangle(120, 200, 2, 80);
        it.printf(180, 200, id(bold20), TextAlign::CENTER, "%s", day_name_1.c_str());
        it.printf(180, 220, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_J1).state].c_str());
        it.printf(180, 260, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_J1).state);
        it.filled_rectangle(240, 200, 2, 80);
        it.printf(300, 200, id(bold20), TextAlign::CENTER, "%s", day_name_2.c_str());
        it.printf(300, 220, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_J2).state].c_str());
        it.printf(300, 260, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_J2).state);
        it.filled_rectangle(360, 200, 2, 80);
        it.printf(420, 200, id(bold20), TextAlign::CENTER, "%s", day_name_3.c_str());
        it.printf(420, 220, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_J3).state].c_str());
        it.printf(420, 260, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_J3).state);


        
        it.filled_rectangle(20, 295, 440, 2);

        it.print(240, 310, id(bold30), TextAlign::TOP_CENTER, "TEMPO");

        it.print(120, 348, id(bold25), TextAlign::TOP_CENTER, "Aujourd'hui");
        it.printf(120, 375, id(bold20), TextAlign::TOP_CENTER, "%s", id(tempo_jour).state.c_str());
        it.filled_rectangle(240, 348, 2, 45);
        it.print(360, 348, id(bold25), TextAlign::TOP_CENTER, "Demain");
        it.printf(360, 375, id(bold20), TextAlign::TOP_CENTER, "%s", id(tempo_demain).state.c_str());

        it.filled_rectangle(20, 400, 440, 2);

        it.print(60, 420, id(bold20), TextAlign::TOP_CENTER, "Salon");
        it.print(20, 440, id(mdi25), TextAlign::TOP_CENTER, "\U000F050F");
        it.printf(40, 445, id(bold20), TextAlign::TOP_LEFT, "%2.1f°C", id(temp_salon).state);
        it.filled_rectangle(120, 420, 2, 50);
        it.print(180, 420, id(bold20), TextAlign::TOP_CENTER, "Chambre");
        it.print(140, 440, id(mdi25), TextAlign::TOP_CENTER, "\U000F050F");
        it.printf(160, 445, id(bold20), TextAlign::TOP_LEFT, "%2.1f°C", id(temp_chambre).state);
        it.filled_rectangle(240, 420, 2, 50);
        it.print(300, 420, id(bold20), TextAlign::TOP_CENTER, "Lucie");
        it.print(260, 440, id(mdi25), TextAlign::TOP_CENTER, "\U000F050F");
        it.printf(280, 445, id(bold20), TextAlign::TOP_LEFT, "%2.1f°C", id(temp_lucie).state);
        it.filled_rectangle(360, 420, 2, 50);
        it.print(420, 420, id(bold20), TextAlign::TOP_CENTER, "Chloé");
        it.print(380, 440, id(mdi25), TextAlign::TOP_CENTER, "\U000F050F");
        it.printf(400, 445, id(bold20), TextAlign::TOP_LEFT, "%2.1f°C", id(temp_chloe).state);

        it.filled_rectangle(20, 480, 440, 2);

        it.print(240, 500, id(bold30), TextAlign::TOP_CENTER, "Mode Chauffage");
        auto ete = id(summer).state;

        if (ete == "on") {
        it.print(240,540, id(bold20),TextAlign::TOP_CENTER,"Pas de chauffage, c'est l'été !" );
        }
        else  {
        it.printf(240, 540, id(bold20), TextAlign::TOP_CENTER, "%s", id(mode_chauffage).state.c_str());
        }
        it.filled_rectangle(20, 565, 440, 2);

        it.print(240, 580, id(bold30), TextAlign::TOP_CENTER, "Electricité");

        it.print(120, 620, id(bold25), TextAlign::TOP_CENTER, "Import");
        it.print(70, 650, id(mdi25), TextAlign::TOP_CENTER, "\U000F192D");
        it.printf(90, 655, id(bold20), TextAlign::TOP_LEFT, "%2.1f kWh", id(conso_total).state);
        it.filled_rectangle(240, 620, 2, 140);
        it.print(360, 620, id(bold25), TextAlign::TOP_CENTER, "Cout");
        it.print(270, 650, id(mdi25), TextAlign::TOP_CENTER, "\U000F01AD");
        it.printf(290, 655, id(bold20), TextAlign::TOP_LEFT, "%2.1f EUR \\ %2.1f %%", id(cout_edf).state, id(evol_cout_edf).state);


        it.filled_rectangle(20, 690, 440, 2);

        it.print(120, 710, id(bold25), TextAlign::TOP_CENTER, "Panneaux");
        it.print(30, 740, id(mdi25), TextAlign::TOP_CENTER, "\U000F1A73");
        it.printf(50, 745, id(bold20), TextAlign::TOP_LEFT, "%2.1f kWh \\ %2.1f %%", id(production).state, id(evol_production).state);
        
        it.print(360, 710, id(bold25), TextAlign::TOP_CENTER, "Export");
        it.print(310, 740, id(mdi25), TextAlign::TOP_CENTER, "\U000F192C");
        it.printf(330, 745, id(bold20), TextAlign::TOP_LEFT, "%2.1f kWh", id(export_kwh).state);

        it.printf(250, 780, id(bold15), TextAlign::TOP_RIGHT, "Infos mises à jour : ");
        it.strftime(255, 780, id(bold15), TextAlign::TOP_LEFT, "%d-%m-%Y %H:%M", id(sntp_time).now());

        // #################### DEBUT DEUXIEME ECRAN ###############################

        } else {
        
       
        it.printf(240, 20, id(bold35), TextAlign::TOP_CENTER, "%s", id(date_fr).state.c_str());
        

        it.filled_rectangle(20, 70, 440, 2);

       
        it.printf(240, 90, id(bold30), TextAlign::TOP_CENTER, "%s", id(vigilance).state.c_str());
        
        
        auto time = id(sntp_time).now(); 
        int today = time.day_of_week; 

        std::array<std::string, 7> weekdays = {"Sam", "Dim", "Lun", "Mar", "Mer", "Jeu", "Ven"};

        int future_day_index_0 = (today ) % 7;
        std::string day_name_0 = weekdays[future_day_index_0];

        int future_day_index_1 = (today + 1 ) % 7;
        std::string day_name_1 = weekdays[future_day_index_1];

        int future_day_index_2 = (today + 2 ) % 7;
        std::string day_name_2 = weekdays[future_day_index_2];

        int future_day_index_3 = (today + 3 ) % 7;
        std::string day_name_3 = weekdays[future_day_index_3];

        it.printf(60, 140, id(bold20), TextAlign::TOP_CENTER, "%s", id(heure_h1).state.c_str());
        it.printf(60, 160, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_h1).state].c_str());
        it.printf(60, 200, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_h1).state);
        it.filled_rectangle(120, 140, 2, 80);
        it.printf(180, 140, id(bold20), TextAlign::TOP_CENTER, "%s", id(heure_h2).state.c_str());
        it.printf(180, 160, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_h2).state].c_str());
        it.printf(180, 200, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_h2).state);
        it.filled_rectangle(240, 140, 2, 80);
        it.printf(300, 140, id(bold20), TextAlign::TOP_CENTER, "%s", id(heure_h3).state.c_str());
        it.printf(300, 160, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_h3).state].c_str());
        it.printf(300, 200, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_h3).state);
        it.filled_rectangle(360, 140, 2, 80);
        it.printf(420, 140, id(bold20), TextAlign::TOP_CENTER, "%s", id(heure_h4).state.c_str());
        it.printf(420, 160, id(mdi36), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(condition_h4).state].c_str());
        it.printf(420, 200, id(bold20), TextAlign::TOP_CENTER, "%2.1f°C", id(temp_h4).state);


        
        it.filled_rectangle(20, 255, 440, 2);

        it.print(120, 280, id(bold30), TextAlign::TOP_CENTER, "Chloé");
        it.print(360, 280, id(bold30), TextAlign::TOP_CENTER, "Lucie");
        it.printf(120, 325, id(bold25), TextAlign::TOP_CENTER, "Moyenne: %s", id(moyenne_chloe).state.c_str());
        it.printf(120, 360, id(bold20), TextAlign::TOP_CENTER, "Cours: %s", id(cours_chloe).state.c_str());
        it.filled_rectangle(240, 280, 2, 90);
        it.printf(360, 325, id(bold25), TextAlign::TOP_CENTER, "Moyenne: %s", id(moyenne_lucie).state.c_str());
        it.printf(360, 360, id(bold20), TextAlign::TOP_CENTER, "Cours: %s", id(cours_lucie).state.c_str());

        it.filled_rectangle(20, 390, 440, 2);

        it.print(60, 410, id(bold20), TextAlign::TOP_CENTER, "Axelle");
        it.printf(60, 435, id(bold20), TextAlign::TOP_CENTER, "%s %%", id(batterie_axelle).state.c_str());
        it.filled_rectangle(120, 410, 2, 50);
        it.print(180, 410, id(bold20), TextAlign::TOP_CENTER, "Richard");
        it.printf(180, 435, id(bold20), TextAlign::TOP_CENTER, "%s %%", id(batterie_richard).state.c_str());
        it.filled_rectangle(240, 410, 2, 50);
        it.print(300, 410, id(bold20), TextAlign::TOP_CENTER, "Lucie");
        it.printf(300, 435, id(bold20), TextAlign::TOP_CENTER, "%s %%", id(batterie_lucie).state.c_str());
        it.filled_rectangle(360, 410, 2, 50);
        it.print(420, 410, id(bold20), TextAlign::TOP_CENTER, "Chloé");
        it.printf(420, 435, id(bold20), TextAlign::TOP_CENTER, "%s %%", id(batterie_chloe).state.c_str());

        it.filled_rectangle(20, 470, 440, 2);

        it.print(240, 490, id(bold30), TextAlign::TOP_CENTER, "Anniversaire(s)");
        it.printf(240, 530, id(bold20), TextAlign::TOP_CENTER, "%s", id(anniversaire).state.c_str());

        it.filled_rectangle(20, 555, 440, 2);

        it.print(240, 580, id(bold30), TextAlign::TOP_CENTER, "Electricité");

        it.print(120, 620, id(bold25), TextAlign::TOP_CENTER, "Import");
        it.print(70, 650, id(mdi25), TextAlign::TOP_CENTER, "\U000F192D");
        it.printf(90, 655, id(bold20), TextAlign::TOP_LEFT, "%2.1f kWh", id(conso_total).state);
        it.filled_rectangle(240, 620, 2, 140);
        it.print(360, 620, id(bold25), TextAlign::TOP_CENTER, "Cout");
        it.print(270, 650, id(mdi25), TextAlign::TOP_CENTER, "\U000F01AD");
        it.printf(290, 655, id(bold20), TextAlign::TOP_LEFT, "%2.1f EUR \\ %2.1f %%", id(cout_edf).state, id(evol_cout_edf).state);


        it.filled_rectangle(20, 690, 440, 2);

        it.print(120, 710, id(bold25), TextAlign::TOP_CENTER, "Panneaux");
        it.print(30, 740, id(mdi25), TextAlign::TOP_CENTER, "\U000F1A73");
        it.printf(50, 745, id(bold20), TextAlign::TOP_LEFT, "%2.1f kWh \\ %2.1f %%", id(production).state, id(evol_production).state);
        
        it.print(360, 710, id(bold25), TextAlign::TOP_CENTER, "Export");
        it.print(310, 740, id(mdi25), TextAlign::TOP_CENTER, "\U000F192C");
        it.printf(330, 745, id(bold20), TextAlign::TOP_LEFT, "%2.1f kWh", id(export_kwh).state);

        it.printf(250, 780, id(bold15), TextAlign::TOP_RIGHT, "Infos mises à jour : ");
        it.strftime(255, 780, id(bold15), TextAlign::TOP_LEFT, "%d-%m-%Y %H:%M", id(sntp_time).now());

        }
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ecran Fallback Hotspot"
    password: ""

captive_portal:
    
